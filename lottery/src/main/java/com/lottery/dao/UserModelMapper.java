package com.lottery.dao;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import com.lottery.pojo.UserModel;

public interface UserModelMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOTTERY.T_USER
     *
     * @mbggenerated Fri Oct 27 19:52:15 CST 2017
     */
    int deleteByPrimaryKey(Short userid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOTTERY.T_USER
     *
     * @mbggenerated Fri Oct 27 19:52:15 CST 2017
     */
    int insert(UserModel record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOTTERY.T_USER
     *
     * @mbggenerated Fri Oct 27 19:52:15 CST 2017
     */
    int insertSelective(UserModel record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOTTERY.T_USER
     *
     * @mbggenerated Fri Oct 27 19:52:15 CST 2017
     */
    UserModel selectByPrimaryKey(Short userid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOTTERY.T_USER
     *
     * @mbggenerated Fri Oct 27 19:52:15 CST 2017
     */
    int updateByPrimaryKeySelective(UserModel record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LOTTERY.T_USER
     *
     * @mbggenerated Fri Oct 27 19:52:15 CST 2017
     */
    int updateByPrimaryKey(UserModel record);
    
    /**
     * 按条件查询所有用户
     * @param user
     * @return
     */
    List<UserModel> queryAll(UserModel user);
    
    /**
     * 根据用户名或电话号码进行查询
     * @param user
     * @return
     */
    int selectByUsernameOrPhone(UserModel user);
    
    /**
     * 根据用户名和密码或电话号码和密码
     * @param user
     * @return
     */
    UserModel selectByUsernameOrPhoneAndPassword(UserModel user);
    
    /**
     * 根据支付宝账户查询
     * @param anumber
     * @return
     */
    int selectByAnumber(String anumber);

    /**
     * 检查密码是否正确
     * @param userid
     * @param password
     * @return
     */
	int checkPassword(@Param("userid") Short userid, @Param("password") String password);

	/**
	 * 修改登录时间
	 * @return
	 */
	int updateLoginDate(short userid);

	/**
	 * 检查用户名是否存在
	 * @param userid
	 * @param username
	 * @return
	 */
	int checkUsername(@Param("userid") short userid, @Param("username") String username);
	
	/**
	 * 检查电话号码是否存在
	 * @param phone
	 * @return
	 */
	int checkPhone(@Param("userid") short userid, @Param("phone") String phone);

	/**
	 * 判断管理员是否存在
	 * @param user
	 * @return
	 */
	UserModel selectByUsernameOrPhoneAndPasswordM(UserModel user);

	/**
	 * 根据id判断用户是否存在
	 * @param userid
	 * @return
	 */
	int checkById(short userid);

	/**
	 * 查询需要冻结的用户
	 * @return
	 */
	List<UserModel> selectFreezeByTime();
	
	/**
	 * 根据注册时间与登录时间差进行冻结
	 * @param userid
	 * @return
	 */
	int freezeByTime(short userid);

	/**
	 * 根据电话号码查询用户是否存在
	 * @param phone
	 * @return
	 */
	int selectByPhone(String phone);

	/**
	 * 根据id进行解冻
	 * @param phone
	 * @return
	 */
	int unFreezeById(short userid);
	
	/**
	 * 按条件查询是否有此用户
	 * @param user
	 * @return
	 */
	int selectCount(UserModel user);

	UserModel selectByUserName(String username);
}